package maker.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.itextpdf.io.font.constants.StandardFonts;
import com.itextpdf.kernel.colors.Color;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Text;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.Style;

import maker.model.ResumeModel;
import maker.service.ResumeService;

@RestController
@RequestMapping("/api/resumes")
public class ResumeController {

    @Autowired
    private ResumeService resumeService;

    @PostMapping
    public ResponseEntity<ResumeModel> saveResume(@RequestBody ResumeModel resume) {
        ResumeModel savedResume = resumeService.saveResume(resume);
        return new ResponseEntity<>(savedResume, HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<ResumeModel> getResumeById(@PathVariable int id) {
        ResumeModel resume = resumeService.getResumeById(id);
        return resume != null ? ResponseEntity.ok(resume) : ResponseEntity.notFound().build();
    }

    @GetMapping
    public ResponseEntity<List<ResumeModel>> getAllResumes() {
        List<ResumeModel> resumes = resumeService.getAllResumes();
        return ResponseEntity.ok(resumes);
    }

    @PutMapping("/{id}")
    public ResponseEntity<ResumeModel> updateResume(@PathVariable int id, @RequestBody ResumeModel resume) {
        resume.setId(id);
        ResumeModel updatedResume = resumeService.updateResume(resume);
        return updatedResume != null ? ResponseEntity.ok(updatedResume) : ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteResume(@PathVariable int id) {
        resumeService.deleteResume(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/{id}/download")
    public ResponseEntity<byte[]> downloadResumeAsPdf(@PathVariable int id) {
        ResumeModel resume = resumeService.getResumeById(id);
        if (resume == null) {
            return ResponseEntity.notFound().build();
        }

        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            PdfFont font = PdfFontFactory.createFont(StandardFonts.HELVETICA);
            Color color = new DeviceRgb(0, 0, 0); // Black color

            Style titleStyle = new Style()
                    .setFont(font)
                    .setFontColor(color)
                    .setFontSize(18);

            Style bodyStyle = new Style()
                    .setFont(font)
                    .setFontColor(color)
                    .setFontSize(12);

            com.itextpdf.kernel.pdf.PdfDocument pdfDocument = new com.itextpdf.kernel.pdf.PdfDocument(new com.itextpdf.kernel.pdf.PdfWriter(outputStream));
            com.itextpdf.layout.Document document = new com.itextpdf.layout.Document(pdfDocument);

            Paragraph title = new Paragraph("Resume").addStyle(titleStyle);
            document.add(title);

            document.add(new Paragraph("Name: " + resume.getName()).addStyle(bodyStyle));
            document.add(new Paragraph("Email: " + resume.getEmail()).addStyle(bodyStyle));
            document.add(new Paragraph("Phone: " + resume.getPhone()).addStyle(bodyStyle));
            document.add(new Paragraph("Address: " + resume.getAddress()).addStyle(bodyStyle));
            document.add(new Paragraph("Skills: " + resume.getSkills()).addStyle(bodyStyle));
            document.add(new Paragraph("Education: " + resume.getEducation()).addStyle(bodyStyle));
            document.add(new Paragraph("Experience: " + resume.getExperience()).addStyle(bodyStyle));
            // Add more fields as needed

            document.close();

            byte[] pdfBytes = outputStream.toByteArray();

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.setContentDispositionFormData("filename", "resume.pdf");

            return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}
